from rest_framework import serializers
from apps.vulnerabilities.models import Vulnerability
from django.utils.html import escape


class FixedVulnerabilitySerializer(serializers.ModelSerializer):
    """Serializer para vulnerabilidades que se marcan como fixeadas y se almacenan en la base de datos"""

    id = serializers.CharField(max_length=100, required=True)
    description = serializers.CharField(max_length=500, required=True)
    severity = serializers.ChoiceField(
        choices=["LOW", "MEDIUM", "HIGH", "CRITICAL"], required=True
    )

    class Meta:
        model = Vulnerability
        fields = ["id", "description", "severity", "is_fixed", "added_at"]
        read_only_fields = ["is_fixed", "added_at"]

    def validate_id(self, value):
        """Validación del formato del ID de la vulnerabilidad"""

        return escape(value.strip())  # Sanitizar y eliminar espacios adicionales

    def validate_description(self, value):
        """Sanitización básica del campo de descripción"""
        sanitized_value = escape(value.strip())  # Eliminar espacios y sanitizar entrada
        if len(sanitized_value) < 10:
            raise serializers.ValidationError("La descripción es demasiado corta.")
        return sanitized_value

    def validate_severity(self, value):
        """Validación de severidad para asegurar que está en el conjunto permitido"""
        severity_choices = ["LOW", "MEDIUM", "HIGH", "CRITICAL"]
        if value not in severity_choices:
            raise serializers.ValidationError(
                "La severidad proporcionada no es válida."
            )
        return value

    def validate(self, data):
        """Validaciones adicionales a nivel de objeto"""
        if data["severity"] == "CRITICAL" and len(data["description"]) < 50:
            raise serializers.ValidationError(
                "Las vulnerabilidades críticas deben tener descripciones detalladas."
            )
        return data

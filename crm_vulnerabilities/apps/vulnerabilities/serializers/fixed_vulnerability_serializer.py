from rest_framework import serializers
from apps.vulnerabilities.models import Vulnerability
from django.utils.html import escape


class FixedVulnerabilitySerializer(serializers.ModelSerializer):
    """
    Serializer for vulnerabilities marked as fixed and stored in the database.
    """

    id = serializers.CharField(max_length=100, required=True)
    description = serializers.CharField(max_length=500, required=True)
    severity = serializers.ChoiceField(
        choices=["LOW", "MEDIUM", "HIGH", "CRITICAL"], required=True
    )

    class Meta:
        model = Vulnerability
        fields = ["id", "description", "severity", "is_fixed", "added_at"]
        read_only_fields = ["is_fixed", "added_at"]

    def validate_id(self, value):
        """
        Validate the format of the vulnerability ID.

        Args:
            value (str): The ID to validate.

        Returns:
            str: The sanitized ID value.

        Raises:
            serializers.ValidationError: If the ID is invalid.
        """
        sanitized_value = escape(value.strip())  # Sanitize and strip whitespace
        if not sanitized_value:
            raise serializers.ValidationError("The ID cannot be empty.")
        return sanitized_value

    def validate_description(self, value):
        """
        Basic sanitation of the description field.

        Args:
            value (str): The description to validate.

        Returns:
            str: The sanitized description value.

        Raises:
            serializers.ValidationError: If the description is too short.
        """
        sanitized_value = escape(value.strip())  # Strip whitespace and sanitize input
        if len(sanitized_value) < 10:
            raise serializers.ValidationError("The description is too short.")
        return sanitized_value

    def validate_severity(self, value):
        """
        Validate severity to ensure it is within the allowed choices.

        Args:
            value (str): The severity level to validate.

        Returns:
            str: The validated severity level.

        Raises:
            serializers.ValidationError: If the severity is not valid.
        """
        severity_choices = ["LOW", "MEDIUM", "HIGH", "CRITICAL"]
        if value not in severity_choices:
            raise serializers.ValidationError("The provided severity is not valid.")
        return value

    def validate(self, data):
        """
        Additional object-level validations.

        Args:
            data (dict): The data to validate.

        Returns:
            dict: The validated data.

        Raises:
            serializers.ValidationError: If the data is invalid.
        """
        if data["severity"] == "CRITICAL" and len(data["description"]) < 50:
            raise serializers.ValidationError(
                "Critical vulnerabilities must have detailed descriptions."
            )
        return data

import logging
from rest_framework import serializers
from django.utils.html import escape

# Initialize logger for this module
logger = logging.getLogger("vulnerabilities")


class NISTVulnerabilitySerializer(serializers.Serializer):
    """
    Serializer for vulnerabilities obtained from the NIST API.
    """

    cve_id = serializers.CharField(max_length=100)
    description = serializers.CharField(max_length=500)
    severity = serializers.CharField()

    def to_representation(self, instance):
        """
        Converts the format of data from the external API to one compatible with the internal API.

        Args:
            instance (dict): The data received from the external API.

        Returns:
            dict: The formatted data suitable for the internal API.
        """
        try:
            return {
                "cve_id": escape(instance.get("cve", {}).get("id", "")),
                "description": escape(
                    instance.get("cve", {})
                    .get("descriptions", [{}])[0]
                    .get("value", "")
                    .strip()
                ),
                "severity": escape(
                    instance.get("cve", {})
                    .get("metrics", {})
                    .get("cvssMetricV2", [{}])[0]
                    .get("baseSeverity", "")
                ),
            }
        except KeyError as e:
            # Log missing key errors
            logger.error(f"Missing key in API response: {e}", exc_info=True)
            raise serializers.ValidationError(
                f"Error processing API response.{str(e)}"
            ) from e
        except Exception as e:
            # Log unexpected errors
            logger.error(f"Error in to_representation method: {e}", exc_info=True)
            raise serializers.ValidationError("An unexpected error occurred.") from e

import logging
from rest_framework import serializers
from django.utils.html import escape

# Initialize logger for this module
logger = logging.getLogger("vulnerabilities")


class NISTVulnerabilitySerializer(serializers.Serializer):
    """
    Serializer for vulnerabilities obtained from the NIST API.
    """

    cve_id = serializers.CharField(max_length=100)
    description = serializers.CharField(max_length=500)
    severity = serializers.CharField()

    def to_representation(self, instance):
        """
        Converts the format of data from the external API to one compatible with the internal API.

        Args:
            instance (dict): The data received from the external API.

        Returns:
            dict: The formatted data suitable for the internal API.
        """
        try:
            return {
                "cve_id": escape(instance["cve"]["CVE_data_meta"]["ID"]),
                "description": escape(
                    instance["cve"]["description"]["description_data"][0][
                        "value"
                    ].strip()
                ),
                "severity": escape(
                    instance["impact"]["baseMetricV3"]["cvssV3"]["baseSeverity"]
                ),
            }
        except KeyError as e:
            # Log missing key errors
            logger.error(f"Missing key in API response: {e}", exc_info=True)
            raise serializers.ValidationError("Error processing API response.") from e
        except Exception as e:
            # Log unexpected errors
            logger.error(f"Error in to_representation method: {e}", exc_info=True)
            raise serializers.ValidationError("An unexpected error occurred.") from e

    def validate_severity(self, value):
        """
        Validate to ensure that the severity has a correct value.

        Args:
            value (str): The severity level to validate.

        Returns:
            str: The validated severity level.

        Raises:
            serializers.ValidationError: If the severity is not valid.
        """
        valid_severities = ["LOW", "MEDIUM", "HIGH", "CRITICAL"]
        if value.upper() not in valid_severities:
            raise serializers.ValidationError("The provided severity is not valid.")
        return value.upper()

    def validate(self, data):
        """
        Object-level validations for data consistency.

        Args:
            data (dict): The data to validate.

        Returns:
            dict: The validated data.

        Raises:
            serializers.ValidationError: If the data is invalid.
        """
        if len(data["description"]) < 10:
            raise serializers.ValidationError("The description is too short.")
        return data

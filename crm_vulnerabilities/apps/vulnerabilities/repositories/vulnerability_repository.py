import logging
from django.core.exceptions import ObjectDoesNotExist, ValidationError
from apps.vulnerabilities.interfaces import IVulnerabilityRepository
from apps.vulnerabilities.models import Vulnerability


# Configure logger for the 'vulnerabilities' app
logger = logging.getLogger("vulnerabilities")


class VulnerabilityRepository(IVulnerabilityRepository):
    def __init__(self) -> None:
        """Initialize the repository with the Vulnerability model."""
        self.model = Vulnerability

    def get_fixed_vulnerabilities(self):
        """
        Retrieves all fixed vulnerabilities from the database.

        Returns:
            QuerySet: A Django QuerySet containing all fixed vulnerabilities.
        """
        try:
            # Retrieve all fixed vulnerabilities from the database
            all_fixed_vulnerabilities = self.model.objects.all()
            logger.info("Successfully retrieved all fixed vulnerabilities.")
            return all_fixed_vulnerabilities
        except Exception as e:
            # Log the exception with traceback
            logger.error(f"Error retrieving fixed vulnerabilities: {e}", exc_info=True)
            raise RuntimeError(
                "An error occurred while retrieving fixed vulnerabilities."
            ) from e

    def add_to_fixed_vulnerabilities(self, vulnerability):
        """
        Adds a fixed vulnerability to the database.

        Args:
            vulnerability (dict): A dictionary containing the vulnerability details.

        Returns:
            Vulnerability: The created Vulnerability object.

        Raises:
            ValueError: If the provided data is invalid.
            RuntimeError: If there is an issue creating the vulnerability.
        """
        try:
            # Ensure that the vulnerability dictionary contains required fields
            if not all(
                key in vulnerability for key in ["id", "description", "severity"]
            ):
                raise ValueError("Invalid vulnerability data provided.")

            # Create a new Vulnerability object
            vulnerability_obj = self.model.objects.create(
                id=vulnerability["id"],
                description=vulnerability["description"],
                severity=vulnerability["severity"],
            )
            logger.info(
                f'Successfully added a new fixed vulnerability with ID {vulnerability["id"]}.'
            )
            return vulnerability_obj
        except ValueError as ve:
            # Log the ValueError exception
            logger.warning(f"ValueError while adding fixed vulnerability: {ve}")
            raise
        except ValidationError as ve:
            # Log validation errors from Django ORM
            logger.error(f"ValidationError while adding fixed vulnerability: {ve}")
            raise
        except Exception as e:
            # Log any other exceptions
            logger.error(f"Error adding fixed vulnerability: {e}", exc_info=True)
            raise RuntimeError(
                "An error occurred while adding the fixed vulnerability."
            ) from e

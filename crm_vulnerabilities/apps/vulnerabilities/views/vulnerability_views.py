from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from apps.vulnerabilities.services.service_factory import get_vulnerability_service
from apps.vulnerabilities.serializers.fixed_vulnerability_serializer import (
    FixedVulnerabilitySerializer,
)
from apps.vulnerabilities.serializers.vulnerability_summary_serializer import (
    VulnerabilitySummarySerializer,
)
from apps.alerts.observers.alert_subject import AlertSubject
import logging
from rest_framework.permissions import AllowAny
from apps.vulnerabilities.serializers.nist_vulnerability_serializer import (
    NISTVulnerabilitySerializer,
)

# Configure logger for this module
logger = logging.getLogger("vulnerabilities")


class VulnerabilityListView(APIView):
    """View to get all vulnerabilities from the NIST API"""

    permission_classes = [AllowAny]

    def get(self, request):
        """
        Handles GET requests to fetch all vulnerabilities from the NIST API.

        Args:
            request: The HTTP request object.

        Returns:
            Response: A DRF Response object containing the vulnerabilities data or an error message.
        """
        try:
            service = get_vulnerability_service()
            vulnerabilities = service.get_all_vulnerabilities()

            # Use the serializer to format the data
            serializer = NISTVulnerabilitySerializer(vulnerabilities, many=True)

            return Response(serializer.data, status=status.HTTP_200_OK)
        except Exception as e:
            logger.error(f"Error fetching all vulnerabilities: {e}", exc_info=True)
            return Response(
                {"detail": "An error occurred while fetching vulnerabilities."},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR,
            )


class UnfixedVulnerabilitiesView(APIView):
    """View to get unfixed vulnerabilities"""

    permission_classes = [AllowAny]

    def get(self, request):
        """
        Handles GET requests to fetch all unfixed vulnerabilities.

        Args:
            request: The HTTP request object.

        Returns:
            Response: A DRF Response object containing the unfixed vulnerabilities data or an error message.
        """
        try:
            service = get_vulnerability_service()
            unfixed_vulnerabilities = service.get_unfixed_vulnerabilities()

            # Use the serializer to format the data
            serializer = NISTVulnerabilitySerializer(unfixed_vulnerabilities, many=True)

            return Response(serializer.data, status=status.HTTP_200_OK)
        except Exception as e:
            logger.error(f"Error fetching unfixed vulnerabilities: {e}", exc_info=True)
            return Response(
                {"detail": "An error occurred while fetching unfixed vulnerabilities."},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR,
            )


class VulnerabilityFixedView(APIView):
    """View to mark vulnerabilities as fixed"""

    permission_classes = [AllowAny]

    def post(self, request):
        """
        Handles POST requests to mark vulnerabilities as fixed.

        Args:
            request: The HTTP request object with vulnerability data.

        Returns:
            Response: A DRF Response object with the created vulnerabilities data or validation errors.
        """
        try:
            serializer = FixedVulnerabilitySerializer(data=request.data, many=True)
            if serializer.is_valid():
                alert_subject = AlertSubject()
                service = get_vulnerability_service(alert_subject)
                service.add_to_fixed_vulnerabilities(serializer.validated_data)
                return Response(serializer.data, status=status.HTTP_201_CREATED)
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            logger.error(f"Error marking vulnerabilities as fixed: {e}", exc_info=True)
            return Response(
                {"detail": str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR,
            )

    def get(self, request):
        """
        Handles GET requests to list all fixed vulnerabilities.

        Args:
            request: The HTTP request object.

        Returns:
            Response: A DRF Response object containing the fixed vulnerabilities data or an error message.
        """
        try:
            service = get_vulnerability_service()
            fixed_vulnerabilities = service.get_fixed_vulnerabilities()
            serializer = FixedVulnerabilitySerializer(fixed_vulnerabilities, many=True)
            return Response(serializer.data, status=status.HTTP_200_OK)
        except Exception as e:
            logger.error(f"Error fetching fixed vulnerabilities: {e}", exc_info=True)
            return Response(
                {"detail": "An error occurred while fetching fixed vulnerabilities."},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR,
            )


class VulnerabilitySummaryView(APIView):
    """View to get a summary of vulnerabilities grouped by severity"""

    permission_classes = [AllowAny]

    def get(self, request):
        """
        Handles GET requests to fetch a summary of vulnerabilities grouped by severity.

        Args:
            request: The HTTP request object.

        Returns:
            Response: A DRF Response object containing the summary data or validation errors.
        """
        try:
            service = get_vulnerability_service()
            summary = service.summarize_by_severity()
            serializer = VulnerabilitySummarySerializer(data=summary, many=True)
            if serializer.is_valid():
                return Response(serializer.data, status=status.HTTP_200_OK)
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            logger.error(f"Error fetching vulnerability summary: {e}", exc_info=True)
            return Response(
                {
                    "detail": f"An error occurred while fetching the vulnerability summary. {str(e)}"
                },
                status=status.HTTP_500_INTERNAL_SERVER_ERROR,
            )

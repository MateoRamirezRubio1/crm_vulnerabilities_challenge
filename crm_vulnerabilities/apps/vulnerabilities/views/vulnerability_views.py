from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from apps.vulnerabilities.services.service_factory import get_vulnerability_service
from apps.vulnerabilities.serializers.fixed_vulnerability_serializer import (
    FixedVulnerabilitySerializer,
)
from apps.vulnerabilities.serializers.vulnerability_summary_serializer import (
    VulnerabilitySummarySerializer,
)


class VulnerabilityListView(APIView):
    """Vista para obtener todas las vulnerabilidades desde la API del NIST"""

    def get(self, request):
        service = get_vulnerability_service()
        vulnerabilities = service.get_all_vulnerabilities()
        return Response(vulnerabilities, status=status.HTTP_200_OK)


class UnfixedVulnerabilitiesView(APIView):
    """Vista para obtener las vulnerabilidades no fixeadas"""

    def get(self, request):
        service = get_vulnerability_service()
        unfixed_vulnerabilities = service.get_unfixed_vulnerabilities()
        return Response(unfixed_vulnerabilities, status=status.HTTP_200_OK)


class VulnerabilityFixedView(APIView):
    """Vista para registrar vulnerabilidades como fixeadas"""

    def post(self, request):
        serializer = FixedVulnerabilitySerializer(data=request.data, many=True)
        if serializer.is_valid():
            service = get_vulnerability_service()
            service.add_to_fixed_vulnerabilities(serializer.validated_data)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def get(self, request):
        """
        Listar todas las vulnerabilidades fixeadas.
        """
        service = get_vulnerability_service()
        fixed_vulnerabilities = service.get_fixed_vulnerabilities()
        serializer = FixedVulnerabilitySerializer(fixed_vulnerabilities, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)


class VulnerabilitySummaryView(APIView):
    """Vista para obtener un resumen de las vulnerabilidades agrupadas por severidad"""

    def get(self, request):
        service = get_vulnerability_service()
        summary = service.summarize_by_severity()
        serializer = VulnerabilitySummarySerializer(data=summary, many=True)
        if serializer.is_valid():
            return Response(serializer.data, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

import logging

logger = logging.getLogger("vulnerabilities")


class AlertServiceError(Exception):
    """Exception raised for errors in the alert service."""

    pass


class VulnerabilityObserver:
    def __init__(self, alert_factory):
        self.alert_factory = alert_factory

    def update(self, params):
        try:
            alert_data = self._prepare_alert_data(params)
            alert_service = self.alert_factory.get_alert_service(alert_data["severity"])

            # Validating alert service existence
            if not alert_service:
                logger.error(
                    "Alert service for severity '%s' could not be found.",
                    alert_data["severity"],
                )
                return

            alert_service.send_alert(alert_data["recipient"], alert_data["message"])
            logger.info(
                "Alert sent to %s with message: %s",
                alert_data["recipient"],
                alert_data["message"],
            )

        except Exception as e:
            # Log the exception details
            logger.error("Failed to send alert: %s", str(e), exc_info=True)
            raise AlertServiceError("Failed to send alert") from e

    def _prepare_alert_data(self, params):
        try:
            severity = params.get("severity", "LOW").upper()
            recipient = params.get("recipient", "admin@example.com")
            message = params.get("message", "")

            if not message:
                logger.warning("Alert message is empty.")

            return {
                "severity": severity,
                "recipient": recipient,
                "message": message,
            }
        except Exception as e:
            # Log the exception details
            logger.error("Failed to prepare alert data: %s", str(e), exc_info=True)
            raise ValueError("Failed to prepare alert data") from e

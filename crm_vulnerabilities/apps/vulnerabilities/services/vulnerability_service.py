from apps.vulnerabilities.specifications.unfixed_specification import (
    UnfixedVulnerabilitiesSpecification,
)
import logging
from typing import List, Dict, Any

# Configure logger for this module
logger = logging.getLogger("vulnerabilities")


class VulnerabilityService:

    def __init__(self, repository, nvd_client, aggregator, subject) -> None:
        """
        Initialize the VulnerabilityService with the given dependencies.

        Args:
            repository (IVulnerabilityRepository): The repository for interacting with the database.
            nvd_client (NVDClient): Client for fetching vulnerabilities from NIST API.
            aggregator (Aggregator): Service for summarizing vulnerabilities.
            subject (Subject): Service for managing alerts.
        """
        self.repository = repository
        self.nvd_client = nvd_client
        self.aggregator = aggregator
        self.subject = subject

    def get_all_vulnerabilities(self) -> List[Dict[str, Any]]:
        """
        Fetches all vulnerabilities from the NIST API.

        Returns:
            List[Dict[str, Any]]: A list of vulnerabilities fetched from the NIST API.

        Raises:
            Exception: If there is an issue fetching vulnerabilities from the NIST API.
        """
        try:
            all_vulnerabilities = self.nvd_client.fetch_vulnerabilities(0, 50)
            if not all_vulnerabilities:
                logger.warning("No vulnerabilities fetched from NIST API.")
            return all_vulnerabilities
        except Exception as e:
            logger.error(
                f"Error fetching vulnerabilities from NIST API: {e}", exc_info=True
            )
            raise

    def get_fixed_vulnerabilities(self) -> List[Dict[str, Any]]:
        """
        Retrieves all fixed vulnerabilities from the repository.

        Returns:
            List[Dict[str, Any]]: A list of fixed vulnerabilities from the repository.

        Raises:
            Exception: If there is an issue retrieving vulnerabilities from the repository.
        """
        try:
            fixed_vulnerabilities = self.repository.get_fixed_vulnerabilities()
            if not fixed_vulnerabilities:
                logger.warning(
                    "No fixed vulnerabilities retrieved from the repository."
                )
            return fixed_vulnerabilities
        except Exception as e:
            logger.error(
                f"Error retrieving fixed vulnerabilities from repository: {e}",
                exc_info=True,
            )
            raise

    def get_unfixed_vulnerabilities(self) -> List[Dict[str, Any]]:
        """
        Filters out the unfixed vulnerabilities.

        Returns:
            List[Dict[str, Any]]: A list of unfixed vulnerabilities.

        Raises:
            Exception: If there is an issue filtering vulnerabilities.
        """
        try:
            all_vulnerabilities = self.get_all_vulnerabilities()
            fixed_vulnerabilities = self.get_fixed_vulnerabilities()
            specification = UnfixedVulnerabilitiesSpecification(fixed_vulnerabilities)
            unfixed_vulnerabilities = [
                vulnerability
                for vulnerability in all_vulnerabilities
                if specification.is_satisfied_by(vulnerability)
            ]
            if not unfixed_vulnerabilities:
                logger.warning("No unfixed vulnerabilities found.")
            return unfixed_vulnerabilities
        except Exception as e:
            logger.error(f"Error filtering unfixed vulnerabilities: {e}", exc_info=True)
            raise

    def summarize_by_severity(self) -> Dict[str, int]:
        """
        Summarizes vulnerabilities by severity.

        Returns:
            Dict[str, int]: A summary of vulnerabilities categorized by severity.

        Raises:
            Exception: If there is an issue summarizing vulnerabilities.
        """
        try:
            all_vulnerabilities = self.get_all_vulnerabilities()
            summary = self.aggregator.summarize_by_severity(all_vulnerabilities)
            if not summary:
                logger.warning("No summary available for vulnerabilities by severity.")
            return summary
        except Exception as e:
            logger.error(
                f"Error summarizing vulnerabilities by severity: {e}", exc_info=True
            )
            raise

    def add_to_fixed_vulnerabilities(
        self, vulnerabilities: List[Dict[str, Any]]
    ) -> None:
        """
        Marks vulnerabilities as fixed in the repository and sends alerts.

        Args:
            vulnerabilities (List[Dict[str, Any]]): A list of vulnerabilities to mark as fixed.

        Raises:
            Exception: If there is an issue adding vulnerabilities to the repository or sending alerts.
        """
        try:
            for vulnerability in vulnerabilities:
                if not isinstance(vulnerability, dict):
                    raise ValueError("Invalid vulnerability data format.")

                if not self.nvd_client.vulnerability_exists(vulnerability["id"]):
                    raise ValueError(
                        f"Vulnerability with Id: {vulnerability['id']} does not exists in NIST data base"
                    )

                self.repository.add_to_fixed_vulnerabilities(vulnerability)

                alert_severity = vulnerability.get("severity", "UNKNOWN")
                recipient = "admin@example.com"
                message = f'The vulnerability {vulnerability.get("id", "UNKNOWN")} has been fixed.'

                alert_subject = self.subject
                alert_subject.set_state(alert_severity, recipient, message)
        except Exception as e:
            logger.error(
                f"Error adding vulnerabilities to fixed list or sending alerts: {e}",
                exc_info=True,
            )
            raise

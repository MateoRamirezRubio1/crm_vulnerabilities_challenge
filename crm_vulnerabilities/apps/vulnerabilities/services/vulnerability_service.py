from apps.vulnerabilities.specifications.unfixed_specification import (
    UnfixedVulnerabilitiesSpecification,
)


class VulnerabilityService:

    def __init__(self, repository, nvd_client, aggregator) -> None:
        self.repository = repository
        self.nvd_client = nvd_client
        self.aggregator = aggregator

    def get_all_vulnerabilities(self):
        """Obtiene todas las vulnerabilidades desde la API del NIST"""
        all_vulnerabilities = self.nvd_client.fetch_vulnerabilities(0, 10)

        return all_vulnerabilities

    def get_fixed_vulnerabilities(self):
        """Obtiene todas las vulnerabilidades fixeadas desde el repositorio"""
        fixed_vulnerabilities = self.repository.get_fixed_vulnerabilities()

        return fixed_vulnerabilities

    def get_unfixed_vulnerabilities(self):
        """Filtra las vulnerabilidades no fixeadas"""
        all_vulnerabilities = self.get_all_vulnerabilities()
        fixed_vulnerabilities = self.get_fixed_vulnerabilities()
        specification = UnfixedVulnerabilitiesSpecification(fixed_vulnerabilities)
        unfixed_vulnerabilities = [
            vulnerability
            for vulnerability in all_vulnerabilities
            if specification.is_satisfied_by(vulnerability)
        ]

        return unfixed_vulnerabilities

    def summarize_by_severity(self):
        """Resumir las vulnerabilidades por severidad"""
        all_vulnerabilities = self.get_all_vulnerabilities()
        summary = self.aggregator.summarize_by_severity(all_vulnerabilities)

        print(summary)
        return summary

    def add_to_fixed_vulnerabilities(self, vulnerabilities):
        """Marca vulnerabilidades como fixeadas en el repositorio"""
        for vulnerability in vulnerabilities:
            self.repository.add_to_fixed_vulnerabilities(vulnerability)
